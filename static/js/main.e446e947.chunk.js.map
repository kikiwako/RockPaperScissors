{"version":3,"sources":["components/result.component.jsx","game.js","images/rock.webp","images/paper.webp","images/scissors.webp","images/question.webp","components/move.component.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Result","styled","div","result","props","content","ROCK","PAPER","SCISSOR","TIE","WIN","LOST","moves","game","CHOOSE","getRandomMove","Math","floor","random","play","input","playerMove","toLowerCase","trim","cpuMove","console","log","compare","player","cpu","Move","img","image","question","move","rock","paper","scissors","src","App","React","useState","setCpuMove","resultText","setResultText","played","setPlayed","setTimeout","AppContainer","GridContainer","Rock","Paper","Scissors","PlayerMove","CpuMove","onClick","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e446e947.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst result = (props) => (\r\n  <Result>\r\n      {props.content}\r\n  </Result>\r\n);\r\n\r\nconst Result = styled.div`\r\nwhite-space: pre-wrap;\r\n    margin: auto;\r\n    text-align: center;\r\n    grid-area: result;\r\n    font-family: 'Press Start 2P', cursive;\r\n    color: white;\r\n`;\r\n\r\nexport default result;\r\n","/* eslint-disable eqeqeq */\r\nconst ROCK = \"rock\";\r\nconst PAPER = \"paper\";\r\nconst SCISSOR = \"scissors\";\r\n\r\nconst TIE = \"It's a tie!\\n\\n¯\\\\(°_o)/¯\";\r\nconst WIN = \"You win!\\n\\no(^▽^)o\";\r\nconst LOST = \"You lost!\\n\\nᕦ(òロó)ᕤ\";\r\nconst CHOOSE = \"Choose your move!\\n\\n(◠‿◠)\";\r\n\r\nconst moves = [ROCK, PAPER, SCISSOR];\r\n\r\nconst game = {\r\n\tROCK,\r\n\tPAPER,\r\n\tSCISSOR,\r\n\r\n\tTIE,\r\n\tWIN,\r\n\tLOST,\r\n\tCHOOSE,\r\n\r\n\tmoves: [ROCK, PAPER, SCISSOR],\r\n\r\n\tgetRandomMove: () => {\r\n\t\treturn moves[Math.floor(Math.random() * 3)];\r\n\t},\r\n\r\n\tplay: (input) => {\r\n\t\tconst playerMove = input.toLowerCase().trim();\r\n\t\tconst cpuMove = moves[Math.floor(Math.random() * 3)];\r\n\r\n\t\tconsole.log(`You played ${playerMove}`);\r\n\t\tconsole.log(`Cpu played ${cpuMove}`);\r\n\r\n\t\tconsole.log(this.compare(playerMove, cpuMove));\r\n\t},\r\n\r\n\tcompare: (player, cpu) => {\r\n\t\tif (player == cpu) {\r\n\t\t\treturn TIE;\r\n\t\t}\r\n\r\n\t\tif (player == ROCK) {\r\n\t\t\tif (cpu == PAPER) {\r\n\t\t\t\treturn LOST;\r\n\t\t\t}\r\n\r\n\t\t\tif (cpu == SCISSOR) {\r\n\t\t\t\treturn WIN;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (player == PAPER) {\r\n\t\t\tif (cpu == SCISSOR) {\r\n\t\t\t\treturn LOST;\r\n\t\t\t}\r\n\r\n\t\t\tif (cpu == ROCK) {\r\n\t\t\t\treturn WIN;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (player == SCISSOR) {\r\n\t\t\tif (cpu == ROCK) {\r\n\t\t\t\treturn LOST;\r\n\t\t\t}\r\n\r\n\t\t\tif (cpu == PAPER) {\r\n\t\t\t\treturn WIN;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn \"Oops! You entered \" + player;\r\n\t},\r\n};\r\n\r\nexport default game;\r\n","export default __webpack_public_path__ + \"static/media/rock.355461aa.webp\";","export default __webpack_public_path__ + \"static/media/paper.f1b34ebe.webp\";","export default __webpack_public_path__ + \"static/media/scissors.02e98f2a.webp\";","export default __webpack_public_path__ + \"static/media/question.3cdfce9a.webp\";","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport game from '../game';\r\n\r\n\r\nimport rock from '../images/rock.webp';\r\nimport paper from '../images/paper.webp';\r\nimport scissors from '../images/scissors.webp';\r\nimport question from '../images/question.webp';\r\n\r\nconst cpu = (props) => {\r\n    let image = question;\r\n\r\n    switch (props.move) {\r\n        case game.ROCK:\r\n            image = rock;\r\n            break;\r\n        case game.PAPER:\r\n            image = paper;\r\n            break;\r\n        case game.SCISSOR:\r\n            image = scissors;\r\n            break;\r\n        default:\r\n    }\r\n\r\n    return (<Move src={image}/>);\r\n};\r\n\r\nconst Move = styled.img`\r\n    width: 100%;\r\n`;\r\n\r\nexport default cpu;\r\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport Result from \"./components/result.component\";\nimport Move from \"./components/move.component\";\n\nimport game from './game';\n\nimport rock from './images/rock.webp';\nimport paper from './images/paper.webp';\nimport scissors from './images/scissors.webp';\n\nconst App = ()=>  {\n    const [cpuMove, setCpuMove] = React.useState();\n    const [resultText, setResultText] = React.useState(game.CHOOSE);\n    const [played, setPlayed] = React.useState(false);\n\n    const reset = () => {\n        setCpuMove();\n        setResultText(game.CHOOSE);\n        setPlayed(false);\n    }\n\n    const play = (move) => {\n        const cpuMove = game.getRandomMove();\n        setCpuMove(cpuMove);\n        setPlayed(move);\n        setResultText(game.compare(move, cpuMove));\n        setTimeout(() => reset(), 2000);\n    }\n    \n    const handleRock = ()=> {\n        play(game.ROCK);\n    }\n    \n    const handlePaper = ()=> {\n        play(game.PAPER);\n    }\n    \n    const handleScissors = ()=> {\n        play(game.SCISSOR);\n    }\n\n    const AppContainer = styled.div`\n        height: 90vh;\n        width: 90vw;\n        margin: 5vh 5vw;\n    `;\n\n    const GridContainer = styled.div`\n        position: absolute;\n        top: calc(50% - min(45vw, 45vh));\n        left: calc(50% - min(45vw, 45vh));\n        height: min(90vw, 90vh);\n        width: min(90vw, 90vh);\n        display: grid;\n        grid-template-columns: min(30vw, 30vh) min(30vw, 30vh) min(30vw, 30vh);\n        grid-template-rows: min(30vw, 30vh) min(30vw, 30vh) min(30vw, 30vh);\n        grid-template-areas:\n            \"playerRock . .\"\n            \"playerPaper result cpuMove\"\n            \"playerScissors . .\"\n        ;\n        /* background-color: yellow; */\n    `;\n\n    const Rock = styled.img`\n        visibility: ${played ? \"hidden\" : \"visible\"};\n        grid-area: playerRock;\n        transform: scaleX(-1);\n        width: 100%;\n        transition: 0.2s all ease-out;\n        opacity: 75%;\n\n        &:hover {\n            transform: scaleX(-1.1) scaleY(1.1);\n            transition: 0.2s all ease-out;\n            opacity: 90%;\n        }\n    `;\n\n    const Paper = styled.img`\n        visibility: ${played ? \"hidden\" : \"visible\"};\n        grid-area: playerPaper;\n        transform: scaleX(-1);\n        width: 100%;\n        transition: 0.2s all ease-out;\n        opacity: 75%;\n\n        &:hover {\n            transform: scaleX(-1.1) scaleY(1.1);\n            transition: 0.2s all ease-out;\n            opacity: 90%;\n        }\n    `;\n\n    const Scissors = styled.img`\n        visibility: ${played ? \"hidden\" : \"visible\"};\n        grid-area: playerScissors;\n        transform: scaleX(-1);\n        width: 100%;\n        transition: 0.2s all ease-out;\n        opacity: 75%;\n\n        &:hover {\n            transform: scaleX(-1.1) scaleY(1.1);\n            transition: 0.2s all ease-out;\n            opacity: 90%;\n        }\n    `;\n\n    const PlayerMove = styled.div`\n        visibility: ${played ? \"visible\" : \"hidden\"};\n        transform: scaleX(-1);\n        grid-area: playerPaper;\n    `;\n\n    const CpuMove = styled.div`\n        grid-area: cpuMove\n    `;\n\n    return (\n    <AppContainer>\n        <GridContainer>\n            <Rock onClick={handleRock} src={rock} alt=\"Rock\"/>\n            <Paper onClick={handlePaper} src={paper} alt=\"Paper\"/>\n            <Scissors onClick={handleScissors} src={scissors} alt=\"Scissors\"/>\n            <PlayerMove>\n                <Move move={played}/>\n            </PlayerMove>\n            <Result content={resultText}/>\n            <CpuMove>\n                <Move move={cpuMove}/>\n            </CpuMove>\n        </GridContainer>\n    </AppContainer>\n)}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}